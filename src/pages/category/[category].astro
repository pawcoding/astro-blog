---
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import Article from "../../components/Article.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { CATEGORIES } from "../../constants/categories";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  // Create paths for each category with filtered posts
  return CATEGORIES.map((c) => {
    // Filter posts that have the current category
    const filteredPosts = posts.filter((post) => post.data.category === c.url);

    // Sort by publication date (newest first)
    filteredPosts.sort(
      (a, b) =>
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
    );

    return {
      params: {
        category: c.url,
      },
      props: {
        posts: filteredPosts,
        category: c,
      },
    };
  });
}

const { posts: propsPosts, category } = Astro.props;

// Add reading time to each post
let posts: Array<
  CollectionEntry<"posts"> & {
    readingTime: string;
  }
> = [];
try {
  posts = await Promise.all(
    propsPosts.map(async (post) => {
      const { remarkPluginFrontmatter } = await render(post);

      return {
        ...post,
        readingTime: remarkPluginFrontmatter.minutesRead,
      };
    }),
  );
} catch (error) {
  console.error("Error loading posts:", error);
}
---

<BaseLayout
  title={`Posts in category "${category.name}"`}
  description={`Here you can find all articles in category ${category.name}. Browse through ${posts.length} article${posts.length === 1 ? "" : "s"}.`}
>
  <div class="mx-auto max-w-3xl p-4">
    <h2
      class="3xl:text-4xl pb-4 text-center text-3xl font-bold text-neutral-900 dark:text-neutral-200"
    >
      {category.name}
    </h2>

    <p class="mb-8 dark:text-neutral-300">
      {category.description}
      <br />
      There are currently {posts.length} article{posts.length === 1 ? "" : "s"} in
      this category.
    </p>

    <section class="flex flex-col gap-4">
      {posts.map((post) => <Article post={post} />)}
    </section>
  </div>
</BaseLayout>
