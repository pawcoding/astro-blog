---
import "@fontsource-variable/source-serif-4";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import TableOfContents from "../components/TableOfContents.astro";
import Tag from "../components/Tag.astro";
import MetaInfo from "../components/MetaInfo.astro";
import { formatDate, formatDateMachine } from "../utils/format-date";
import BaseLayout from "./BaseLayout.astro";
import Chat from "../components/chat.solid";

interface Props {
  frontmatter: CollectionEntry<"posts">["data"];
  slug: string;
  readingTime: string;
  headings: Array<{ depth: number; slug: string; text: string }>;
}

const { frontmatter, slug, readingTime, headings } = Astro.props;

const pixelUrl = `https://analytics.apps.pawcode.de/matomo.php?idsite=9&rec=1&send_image=0&action_name=${encodeURIComponent(
  frontmatter.title,
)}`;
---

<BaseLayout {...frontmatter} slug={`/posts/${slug}`} post={true}>
  <div
    class="post-container @container mx-auto max-w-screen-md p-4 md:max-w-screen-sm lg:max-w-screen-md xl:max-w-3xl"
  >
    <section
      class="border-b border-b-neutral-200 pb-2 dark:border-b-neutral-800"
    >
      <div
        class="flex items-center justify-between pb-4 text-neutral-900 @3xl:text-4xl dark:text-neutral-200"
      >
        <h1
          class="text-3xl font-bold text-neutral-900 @3xl:text-4xl dark:text-neutral-200"
          id="title"
        >
          {frontmatter.title}
        </h1>

        <button
          type="button"
          id="shareButton"
          title="Share post"
          class="md:hocus:text-neutral-600/75 dark:hocus:text-neutral-300/75 inline-flex cursor-pointer items-center justify-center md:text-neutral-600 dark:text-neutral-300"
        >
          <span class="sr-only">Share post</span>

          <Icon
            id="shareIcon"
            name="heroicons:share"
            class="h-7 w-7 md:h-6 md:w-6"
          />
          <Icon
            id="copyIcon"
            name="heroicons:clipboard-document-check"
            class="hidden h-7 w-7 md:h-6 md:w-6"
          />
        </button>
      </div>

      <div class="flex flex-wrap items-center gap-1 pb-4">
        {frontmatter.tags?.map((tag) => <Tag label={tag} size="medium" />)}
      </div>

      <MetaInfo
        pubDate={frontmatter.pubDate}
        readingTime={readingTime}
        color={frontmatter.color}
        category={frontmatter.category}
      />
    </section>

    <TableOfContents headings={headings} title={frontmatter.title} />

    <section
      class="prose prose-neutral prose-code:text-sm prose-lg dark:prose-invert mt-4 max-w-screen-md"
    >
      <div>
        <slot />
      </div>

      <p class="text-right text-sm text-neutral-500 dark:text-neutral-300">
        <time datetime={formatDateMachine(frontmatter.pubDate)}>
          {frontmatter.pubDate && formatDate(frontmatter.pubDate)}
        </time>

        {
          frontmatter.modDate && (
            <time datetime={formatDateMachine(frontmatter.modDate)}>
              {" "}
              (Updated: <span>{formatDate(frontmatter.modDate)}</span>)
            </time>
          )
        }
      </p>

      <hr class="mt-8" />

      <section
        class="prose lg:prose-lg prose-neutral dark:prose-invert mt-4 max-w-screen-md"
      >
        <small>
          If you have any questions or other feedback, feel free to reach out to
          me on the social media platforms listed below.
        </small>
      </section>
    </section>
  </div>

  <Chat client:only />

  <noscript>
    <img class="h-0 w-0 opacity-0" src={pixelUrl} />
  </noscript>

  <script>
    const shareButton = document.getElementById("shareButton");
    if (shareButton) {
      shareButton.addEventListener("click", async () => {
        const url = window.location.href;
        const title = document.title;

        if (navigator.share) {
          try {
            await navigator.share({ title, url });
            return;
          } catch (err) {
            if (
              err &&
              typeof err === "object" &&
              "name" in err &&
              err.name === "AbortError"
            ) {
              return;
            }
            console.error("Share failed:", err);
          }
        }

        try {
          await navigator.clipboard.writeText(url);

          // Show a temporary success icon
          const shareIcon = shareButton.querySelector("#shareIcon");
          shareIcon?.classList.add("hidden");
          const copyIcon = shareButton.querySelector("#copyIcon");
          copyIcon?.classList.remove("hidden");

          setTimeout(() => {
            copyIcon?.classList.add("hidden");
            shareIcon?.classList.remove("hidden");
          }, 3000);
        } catch (err) {
          console.error("Could not copy URL:", err);
          alert("Could not copy URL.");
        }
      });
    }
  </script>
</BaseLayout>
